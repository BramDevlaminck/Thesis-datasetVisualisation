import json
import re

import matplotlib.pyplot as plt

from statistics_calculator import FileType, read_tsv_file


def count_successive_il(proteins: list[str]) -> dict[int, int]:
    result: dict[int, int] = dict()
    for protein in proteins:
        for match in re.findall("[IL]+", protein):
            key = len(match)
            current_count = result.get(key, 0)
            result[key] = current_count + 1
            # for i in range(1, key + 1):
            #     current_count = result.get(i, 0)
            #     result[i] = current_count + 1

    return result


# returns a list which contains the number of I's or L's for each protein
def count_il_occurrences(proteins: list[str]) -> list[int]:
    result = []
    for protein in proteins:
        count = 0
        for char in protein:
            if char == "I" or char == "L":
                count += 1
        result.append(count)

    return result


def jsonKeys2int(x):
    if isinstance(x, dict):
        return {int(k): v for k, v in x.items()}
    return x


def generate_graph(il_multiples_json: str):
    counts_dict = {}
    with open(il_multiples_json) as fp:
        counts_dict = json.load(fp, object_hook=jsonKeys2int)

    max_IL = max(counts_dict.keys()) + 1000

    bucket_size = max_IL // 50
    buckets = [0 for _ in range(50)]

    for key, value in counts_dict.items():
        buckets[key // bucket_size] += value

    keys = [f"{i*bucket_size}-{(i+1)*bucket_size}" for i in range(50)]

    # creating the bar plot
    plt.bar(keys, buckets, color="maroon", width=0.4, log=True)

    plt.xlabel("Courses offered")
    plt.ylabel("No. of students enrolled")
    plt.title("Students enrolled in different courses")
    plt.show()


if __name__ == "__main__":
    proteins = read_tsv_file(
        "/mnt/hdd/uniprot/uniprotKB_protein_database.tsv", FileType.DATABASE
    )

    counts = count_successive_il(
        [
            "MALAHAGSRPFPALEVVSFVPAEASRKPRQRRPSVIAHALSGTIGSVLAEAILFPVDTIKLKVQTAAASDRRGFLATLISVLGEAGFRGLYRGIGAALIKESIHSLNYWIFHGSLFRLFTEFEDTSATSPMRRLVLNLVSKQMNWLCTVPFEVISSVNQMSEKAPGFAATAAALYQDRLRNTLITSMLRVRAMFLQSCGVEHSELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIHVGPHKTGTTSLQTFLVEKAAWLESEYGVSVGFSKAKQGSYEIAQLIQAKFGERTEGCSHISMEKRPEKLAQALKDVNSILEQSKVTILSSEDFSCFREKHWKYLFSHLNVDAGCLSAVVAHREASAWLTSWWLEMSKQTSEPVSWMSWVSEFAGKREPDAHGDSDPQLQLLNVLEDAFAKAVEAVSYDYLQEVNCSMAAYIVCNVTLHKSGPAWKTCKNKVNRKASVSHNKSPPRAAVDVVDLARELYQAKQALEATECDVPWAKYTKTEAINLVPTAKAVINVAELLPQICESFDALFVSETDDWFARTGAQRPSSQPKPQCSVDLKKLKAPHWRVIDKLLPDCK"
        ]
    )

    with open("il_multiples_single.json", "w") as fp:
        json.dump(counts, fp)

    # il_count_per_protein = count_il_occurrences(proteins)
    # with open("il_occurrences_per_sequence.json", "w") as fp:
    #     json.dump(il_count_per_protein, fp)

    # generate_graph("il_multiples.json")
